use bevy::prelude::Color;
use rand::Rng;

pub struct Palette {
    color: Color,
}

impl Palette {
    pub fn random() -> Color {
        let n = rand::thread_rng().gen_range(0, 15);
        match n {
            0 => Color::rgb(0.0, 0.0, 0.0),
            1 => Color::rgb(029. / 255., 043. / 255., 083. / 255.),
            2 => Color::rgb(126. / 255., 037. / 255., 083. / 255.),
            3 => Color::rgb(000. / 255., 135. / 255., 081. / 255.),
            4 => Color::rgb(171. / 255., 082. / 255., 054. / 255.),
            5 => Color::rgb(095. / 255., 087. / 255., 079. / 255.),
            6 => Color::rgb(194. / 255., 195. / 255., 199. / 255.),
            7 => Color::rgb(255. / 255., 241. / 255., 232. / 255.),
            8 => Color::rgb(255. / 255., 000. / 255., 077. / 255.),
            9 => Color::rgb(255. / 255., 163. / 255., 000. / 255.),
            10 => Color::rgb(255. / 255., 236. / 255., 039. / 255.),
            11 => Color::rgb(000. / 255., 228. / 255., 054. / 255.),
            12 => Color::rgb(041. / 255., 173. / 255., 255. / 255.),
            13 => Color::rgb(131. / 255., 118. / 255., 156. / 255.),
            14 => Color::rgb(255. / 255., 119. / 255., 168. / 255.),
            _ => Color::rgb(255. / 255., 204. / 255., 170. / 255.),
        }
    }
}